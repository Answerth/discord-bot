# ~/discordbot10s/components/createevent.py

import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime
import pytz  # To handle timezones with conventional names
import logging

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,  # Set to DEBUG for more verbosity during development
    format='%(asctime)s:%(levelname)s:%(name)s: %(message)s',
    handlers=[
        logging.FileHandler("createevent.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


timezone_name_map_dst = {
                    "Pacific/Honolulu": "UTC-10 (Hawaii Standard Time)",
                    "America/Anchorage": "UTC-9 (Alaska Daylight Time)",
                    "America/Los_Angeles": "UTC-8 (Pacific Daylight Time)",
                    "America/Denver": "UTC-7 (Mountain Daylight Time)",
                    "America/Chicago": "UTC-6 (Central Daylight Time)",
                    "America/New_York": "UTC-5 (Eastern Daylight Time)",
                    "America/Halifax": "UTC-4 (Atlantic Daylight Time)",
                    "America/Argentina/Buenos_Aires": "UTC-3 (Argentina Time)",
                    "Atlantic/South_Georgia": "UTC-2 (South Georgia & the South Sandwich Islands)",
                    "Atlantic/Azores": "UTC-1 (Azores Daylight Time)",
                    "Etc/UTC": "UTC+0 (Greenwich Mean Time)",
                    "Europe/Berlin": "UTC+1 (Central European Summer Time)",
                    "Europe/Athens": "UTC+2 (Eastern European Summer Time)",
                    "Europe/Moscow": "UTC+3 (Moscow Standard Time)",
                    "Asia/Dubai": "UTC+4 (Gulf Standard Time)",
                    "Asia/Karachi": "UTC+5 (Pakistan Standard Time)",
                    "Asia/Dhaka": "UTC+6 (Bangladesh Standard Time)",
                    "Asia/Bangkok": "UTC+7 (Indochina Time)",
                    "Asia/Tokyo": "UTC+9 (Japan Standard Time)",
                    "Australia/Sydney": "UTC+10 (Australian Eastern Daylight Time)",
                    "Pacific/Guadalcanal": "UTC+11 (Solomon Islands Time)",
                    "Pacific/Auckland": "UTC+12 (New Zealand Daylight Time)",
                    "Pacific/Tongatapu": "UTC+13 (Tonga Time)"
                }

timezone_name_map_std = {
    "Pacific/Honolulu": "UTC-10 (Hawaii Standard Time)",
    "America/Anchorage": "UTC-9 (Alaska Standard Time)",
    "America/Los_Angeles": "UTC-8 (Pacific Standard Time)",
    "America/Denver": "UTC-7 (Mountain Standard Time)",
    "America/Chicago": "UTC-6 (Central Standard Time)",
    "America/New_York": "UTC-5 (Eastern Standard Time)",
    "America/Halifax": "UTC-4 (Atlantic Standard Time)",
    "America/Argentina/Buenos_Aires": "UTC-3 (Argentina Time)",
    "Atlantic/South_Georgia": "UTC-2 (South Georgia & the South Sandwich Islands)",
    "Atlantic/Azores": "UTC-1 (Azores Standard Time)",
    "Etc/UTC": "UTC+0 (Greenwich Mean Time)",
    "Europe/Berlin": "UTC+1 (Central European Time)",
    "Europe/Athens": "UTC+2 (Eastern European Time)",
    "Europe/Moscow": "UTC+3 (Moscow Standard Time)",
    "Asia/Dubai": "UTC+4 (Gulf Standard Time)",
    "Asia/Karachi": "UTC+5 (Pakistan Standard Time)",
    "Asia/Dhaka": "UTC+6 (Bangladesh Standard Time)",
    "Asia/Bangkok": "UTC+7 (Indochina Time)",
    "Asia/Tokyo": "UTC+9 (Japan Standard Time)",
    "Australia/Sydney": "UTC+10 (Australian Eastern Standard Time)",
    "Pacific/Guadalcanal": "UTC+11 (Solomon Islands Time)",
    "Pacific/Auckland": "UTC+12 (New Zealand Standard Time)",
    "Pacific/Tongatapu": "UTC+13 (Tonga Time)"
}


class CreateEvent(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        if not hasattr(bot, 'events_data'):
            self.bot.events_data = {}
            logger.info("Initialized 'events_data' for the bot")
        else:
            logger.info("'events_data' already exists for the bot")

    @app_commands.command(name="createevent", description="Create a new event with interactive components")
    async def create_event(self, interaction: discord.Interaction):
        """Slash command to create a new event."""
        logger.info(f"/createevent invoked by user {interaction.user.id}")
        try:
            await interaction.response.send_message(
                "Choose the type of event you want to create:",
                view=EventTypeView(self.bot, interaction.user),
                ephemeral=False  # Changed to False to allow message edits
            )
            logger.info(f"Sent EventTypeView to user {interaction.user.id}")
        except Exception as e:
            logger.exception(f"Error sending create_event message: {e}")
            await interaction.followup.send(
                "An error occurred while initiating event creation. Please try again.",
                ephemeral=True
            )

class EventTypeView(discord.ui.View):
    def __init__(self, bot, user):
        super().__init__(timeout=300)  # Timeout after 5 minutes of inactivity
        self.bot = bot
        self.user = user

        # Event Type Select Menu
        self.add_item(EventTypeSelect(bot, user))

class EventTypeSelect(discord.ui.Select):
    def __init__(self, bot, user):
        options = [
            discord.SelectOption(label="Boss Encounter", value="boss_encounter", description="Predefined boss events."),
            discord.SelectOption(label="Custom", value="custom", description="Create a custom event."),
        ]
        super().__init__(
            placeholder="Select Event Type",
            min_values=1,
            max_values=1,
            options=options
        )
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"EventTypeSelect callback triggered by user {self.user.id}")
        selected = self.values[0]
        logger.debug(f"Selected event type: {selected}")

        # Initialize event data storage for the user
        if self.user.id not in self.bot.events_data:
            self.bot.events_data[self.user.id] = {}
            logger.debug(f"Initialized events_data for user {self.user.id}")

        # Initialize 'current_event' dict to store temporary data
        self.bot.events_data[self.user.id]['current_event'] = {}
        logger.debug(f"Initialized 'current_event' for user {self.user.id}")

        if selected == 'boss_encounter':
            # Proceed to select a boss
            try:
                await interaction.response.edit_message(
                    content="Select the boss encounter:",
                    view=BossSelectView(self.bot, self.user)
                )
                self.bot.events_data[self.user.id]['current_event']['event_type'] = 'Boss Encounter'
                logger.info(f"BossSelectView sent to user {self.user.id}")
            except discord.errors.NotFound:
                logger.error(f"Message not found when trying to edit to BossSelectView for user {self.user.id}")
                await interaction.response.send_message(
                    "Failed to update the event creation process. Please try again.",
                    ephemeral=True
                )
            except discord.errors.HTTPException as http_exc:
                logger.exception(f"HTTPException while editing message to BossSelectView for user {self.user.id}: {http_exc}")
                await interaction.response.send_message(
                    "An error occurred while updating the event creation process. Please try again.",
                    ephemeral=True
                )
            except Exception as e:
                logger.exception(f"Unexpected error in EventTypeSelect callback for user {self.user.id}: {e}")
                await interaction.response.send_message(
                    "An unexpected error occurred. Please try creating the event again.",
                    ephemeral=True
                )
        elif selected == 'custom':
            # Open a modal to input custom title
            try:
                await interaction.response.send_modal(CustomTitleModal(self.bot, self.user))
                logger.info(f"CustomTitleModal sent to user {self.user.id}")
            except Exception as e:
                logger.exception(f"Error sending CustomTitleModal to user {self.user.id}: {e}")
                await interaction.followup.send(
                    "An error occurred while opening the custom title modal. Please try again.",
                    ephemeral=True
                )

class BossSelectView(discord.ui.View):
    def __init__(self, bot, user):
        super().__init__(timeout=300)
        self.bot = bot
        self.user = user

        # Boss Select Menu
        self.add_item(BossSelect(bot, user))

class BossSelect(discord.ui.Select):
    def __init__(self, bot, user):
        # Predefined list of bosses (ensure <=25 options)
        bosses = [
            discord.SelectOption(label="Dragon Lord", value="dragon_lord"),
            discord.SelectOption(label="Shadow Beast", value="shadow_beast"),
            discord.SelectOption(label="Titan Guardian", value="titan_guardian"),
            # Add more bosses as needed, ensure total <=25
        ]
        super().__init__(
            placeholder="Select a Boss Encounter",
            min_values=1,
            max_values=1,
            options=bosses
        )
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"BossSelect callback triggered by user {self.user.id}")
        selected_boss = self.values[0].replace('_', ' ').title()
        logger.debug(f"Selected boss: {selected_boss}")

        # Store the selected boss
        self.bot.events_data[self.user.id]['current_event']['event_title'] = selected_boss
        logger.debug(f"Stored event_title for user {self.user.id}: {selected_boss}")

        try:
            # Proceed to time selection
            await interaction.response.edit_message(
                content="Select the date and time for the event:",
                view=TimeSelectionView(self.bot, self.user)
            )
            logger.info(f"TimeSelectionView sent to user {self.user.id}")
        except discord.errors.NotFound:
            logger.error(f"Message not found when trying to edit to TimeSelectionView for user {self.user.id}")
            await interaction.response.send_message(
                "Failed to update the event creation process. Please try again.",
                ephemeral=True
            )
        except discord.errors.HTTPException as http_exc:
            logger.exception(f"HTTPException while editing message to TimeSelectionView for user {self.user.id}: {http_exc}")
            await interaction.response.send_message(
                "An error occurred while updating the event creation process. Please try again.",
                ephemeral=True
            )
        except Exception as e:
            logger.exception(f"Unexpected error in BossSelect callback for user {self.user.id}: {e}")
            await interaction.response.send_message(
                "An unexpected error occurred. Please try creating the event again.",
                ephemeral=True
            )

class CustomTitleModal(discord.ui.Modal, title="Custom Event Title"):
    event_title = discord.ui.TextInput(
        label="Enter the event title",
        placeholder="Event Title",
        max_length=100,
        required=True
    )

    def __init__(self, bot, user):
        super().__init__()
        self.bot = bot
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        logger.info(f"CustomTitleModal submitted by user {self.user.id}")
        custom_title = self.event_title.value.strip()
        logger.debug(f"Custom event title input: {custom_title}")

        # Store the custom title
        self.bot.events_data[self.user.id]['current_event']['event_title'] = custom_title
        logger.debug(f"Stored event_title for user {self.user.id}: {custom_title}")

        try:
            # Proceed to time selection
            await interaction.response.edit_message(
                content="Select the date and time for the event:",
                view=TimeSelectionView(self.bot, self.user)
            )
            logger.info(f"TimeSelectionView sent to user {self.user.id} after custom title input")
        except discord.errors.NotFound:
            logger.error(f"Message not found when trying to edit to TimeSelectionView for user {self.user.id}")
            await interaction.response.send_message(
                "Failed to update the event creation process. Please try again.",
                ephemeral=True
            )
        except discord.errors.HTTPException as http_exc:
            logger.exception(f"HTTPException while editing message to TimeSelectionView for user {self.user.id}: {http_exc}")
            await interaction.response.send_message(
                "An error occurred while updating the event creation process. Please try again.",
                ephemeral=True
            )
        except Exception as e:
            logger.exception(f"Unexpected error in CustomTitleModal on_submit for user {self.user.id}: {e}")
            await interaction.response.send_message(
                "An unexpected error occurred. Please try creating the event again.",
                ephemeral=True
            )

class TimeSelectionView(discord.ui.View):
    def __init__(self, bot, user):
        super().__init__(timeout=300)
        self.bot = bot
        self.user = user

        # Replace the TimezoneSelect with TimezoneInputButton and TimezoneInputModal
        self.add_item(DayInputButton(bot, user))
        self.add_item(MonthSelect(bot, user))
        self.add_item(YearSelect(bot, user))
        self.add_item(TimezoneInputButton(bot, user))

class DayInputModal(discord.ui.Modal, title="Enter Day of Month"):
    day = discord.ui.TextInput(
        label="Enter the day (1-31)",
        placeholder="e.g., 15",
        required=True,
        max_length=2  # Limit to two digits for day
    )

    def __init__(self, bot, user):
        super().__init__()
        self.bot = bot
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        logger.info(f"DayInputModal submitted by user {self.user.id}")
        day_input = self.day.value.strip()
        logger.debug(f"Day input: {day_input}")

        # Validate the day input
        try:
            day = int(day_input)
            if not 1 <= day <= 31:
                raise ValueError("Day out of range")

            # Store the valid day in the bot's event data
            self.bot.events_data[self.user.id]['current_event']['day'] = day
            logger.debug(f"Stored day for user {self.user.id}: {day}")

            await interaction.response.send_message(f"Day selected: {day}", ephemeral=True)
            logger.info(f"User {self.user.id} selected day: {day}")

            # Check if all date components are selected
            await check_date_completion(interaction, self.bot, self.user)

        except ValueError:
            logger.warning(f"Invalid day input by user {self.user.id}: {day_input}")
            await interaction.response.send_message("Please enter a valid day between 1 and 31.", ephemeral=True)

class DayInputButton(discord.ui.Button):
    def __init__(self, bot, user):
        super().__init__(label="Enter Day", style=discord.ButtonStyle.primary)
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"DayInputButton clicked by user {self.user.id}")
        # Open the DayInputModal for user input
        try:
            await interaction.response.send_modal(DayInputModal(self.bot, self.user))
            logger.debug(f"DayInputModal sent to user {self.user.id}")
        except Exception as e:
            logger.exception(f"Error sending DayInputModal to user {self.user.id}: {e}")
            await interaction.followup.send(
                "An error occurred while opening the day input modal. Please try again.",
                ephemeral=True
            )

class MonthSelect(discord.ui.Select):
    def __init__(self, bot, user):
        months = [
            discord.SelectOption(label="January", value="1"),
            discord.SelectOption(label="February", value="2"),
            discord.SelectOption(label="March", value="3"),
            discord.SelectOption(label="April", value="4"),
            discord.SelectOption(label="May", value="5"),
            discord.SelectOption(label="June", value="6"),
            discord.SelectOption(label="July", value="7"),
            discord.SelectOption(label="August", value="8"),
            discord.SelectOption(label="September", value="9"),
            discord.SelectOption(label="October", value="10"),
            discord.SelectOption(label="November", value="11"),
            discord.SelectOption(label="December", value="12"),
        ]
        super().__init__(
            placeholder="Select Month",
            min_values=1,
            max_values=1,
            options=months
        )
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"MonthSelect callback triggered by user {self.user.id}")
        selected_month = self.values[0]
        month_name = datetime.strptime(selected_month, "%m").strftime("%B")
        logger.debug(f"Selected month: {selected_month} ({month_name})")

        self.bot.events_data[self.user.id]['current_event']['month'] = selected_month
        logger.debug(f"Stored month for user {self.user.id}: {selected_month}")

        await interaction.response.send_message(f"Month selected: {month_name}", ephemeral=True)
        logger.info(f"User {self.user.id} selected month: {month_name}")

        await check_date_completion(interaction, self.bot, self.user)

class YearSelect(discord.ui.Select):
    def __init__(self, bot, user):
        current_year = datetime.now().year
        years = [discord.SelectOption(label=str(year), value=str(year)) for year in range(current_year, current_year + 5)]
        super().__init__(
            placeholder="Select Year",
            min_values=1,
            max_values=1,
            options=years
        )
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"YearSelect callback triggered by user {self.user.id}")
        selected_year = self.values[0]
        logger.debug(f"Selected year: {selected_year}")

        self.bot.events_data[self.user.id]['current_event']['year'] = selected_year
        logger.debug(f"Stored year for user {self.user.id}: {selected_year}")

        await interaction.response.send_message(f"Year selected: {selected_year}", ephemeral=True)
        logger.info(f"User {self.user.id} selected year: {selected_year}")

        await check_date_completion(interaction, self.bot, self.user)

class TimezoneInputModal(discord.ui.Modal, title="Enter Timezone"):
    timezone = discord.ui.TextInput(
        label="Enter your timezone (e.g., America/New_York)",
        placeholder="e.g., America/New_York",
        required=True,
        max_length=50
    )

    def __init__(self, bot, user):
        super().__init__()
        self.bot = bot
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        logger.info(f"TimezoneInputModal submitted by user {self.user.id}")
        timezone_input = self.timezone.value.strip()
        logger.debug(f"Timezone input: {timezone_input}")

        # Validate the timezone input
        if timezone_input not in pytz.all_timezones:
            logger.warning(f"Invalid timezone input by user {self.user.id}: {timezone_input}")
            await interaction.response.send_message(
                "Invalid timezone. Please enter a valid timezone (e.g., America/New_York).",
                ephemeral=True
            )
            return

        # Store the valid timezone in the bot's event data
        self.bot.events_data[self.user.id]['current_event']['timezone'] = timezone_input
        logger.debug(f"Stored timezone for user {self.user.id}: {timezone_input}")

        # Determine if DST applies and retrieve appropriate timezone name
        timezone_obj = pytz.timezone(timezone_input)
        now = datetime.now(timezone_obj)
        is_dst = bool(now.dst())

        timezone_name_map = timezone_name_map_dst if is_dst else timezone_name_map_std
        timezone_name = timezone_name_map.get(timezone_input, f"{timezone_input} ({'Daylight' if is_dst else 'Standard'} Time)")
        logger.debug(f"Adjusted timezone name: {timezone_name}")

        # Send confirmation to the user
        await interaction.response.send_message(f"Timezone selected: {timezone_name}", ephemeral=True)
        logger.info(f"User {self.user.id} selected timezone: {timezone_name}")

        # Check if all date components are selected
        await check_date_completion(interaction, self.bot, self.user)

class TimezoneInputButton(discord.ui.Button):
    def __init__(self, bot, user):
        super().__init__(label="Enter Timezone", style=discord.ButtonStyle.primary)
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"TimezoneInputButton clicked by user {self.user.id}")
        # Open the TimezoneInputModal for user input
        try:
            await interaction.response.send_modal(TimezoneInputModal(self.bot, self.user))
            logger.debug(f"TimezoneInputModal sent to user {self.user.id}")
        except Exception as e:
            logger.exception(f"Error sending TimezoneInputModal to user {self.user.id}: {e}")
            await interaction.followup.send(
                "An error occurred while opening the timezone input modal. Please try again.",
                ephemeral=True
            )

async def check_date_completion(interaction, bot, user):
    logger.info(f"Checking date completion for user {user.id}")
    event = bot.events_data.get(user.id, {}).get('current_event', {})
    logger.debug(f"Current event data for user {user.id}: {event}")

    if all(k in event for k in ('day', 'month', 'year', 'timezone')):
        try:
            logger.info(f"All date components selected for user {user.id}. Proceeding to participants input.")
            # Proceed to number of participants
            await interaction.message.edit(
                content="All date and time components selected. Please enter the number of participants:",
                view=ParticipantsInputView(bot, user)
            )
            logger.debug(f"ParticipantsInputView sent to user {user.id}")
        except discord.errors.NotFound:
            logger.error(f"Message not found when trying to edit to ParticipantsInputView for user {user.id}")
            await interaction.response.send_message(
                "Failed to update the event creation process. Please try again.",
                ephemeral=True
            )
        except discord.errors.HTTPException as http_exc:
            logger.exception(f"HTTPException while editing message to ParticipantsInputView for user {user.id}: {http_exc}")
            await interaction.response.send_message(
                "An error occurred while updating the event creation process. Please try again.",
                ephemeral=True
            )
        except Exception as e:
            logger.exception(f"Unexpected error in check_date_completion for user {user.id}: {e}")
            await interaction.response.send_message(
                "An unexpected error occurred. Please try creating the event again.",
                ephemeral=True
            )
    else:
        logger.info(f"Date components incomplete for user {user.id}. Current components: {event}")

class ParticipantsInputView(discord.ui.View):
    def __init__(self, bot, user):
        super().__init__(timeout=300)
        self.bot = bot
        self.user = user

        # Button to open the participants modal
        self.add_item(ParticipantsButton(bot, user))

class ParticipantsButton(discord.ui.Button):
    def __init__(self, bot, user):
        super().__init__(
            label="Enter Number of Participants",
            style=discord.ButtonStyle.primary,
            custom_id="participants_button"
        )
        self.bot = bot
        self.user = user

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"ParticipantsButton clicked by user {interaction.user.id}")
        if interaction.user != self.user:
            logger.warning(f"User {interaction.user.id} attempted to interact with another user's event creation.")
            await interaction.response.send_message("You cannot interact with this event creation process.", ephemeral=True)
            return

        try:
            await interaction.response.send_modal(ParticipantsInputModal(self.bot, self.user))
            logger.debug(f"ParticipantsInputModal sent to user {self.user.id}")
        except Exception as e:
            logger.exception(f"Error sending ParticipantsInputModal to user {self.user.id}: {e}")
            await interaction.followup.send(
                "An error occurred while opening the participants input modal. Please try again.",
                ephemeral=True
            )

class ParticipantsInputModal(discord.ui.Modal, title="Number of Participants"):
    participants = discord.ui.TextInput(
        label="Enter the number of participants",
        placeholder="e.g., 10",
        max_length=5,
        required=True
    )

    def __init__(self, bot, user):
        super().__init__()
        self.bot = bot
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        logger.info(f"ParticipantsInputModal submitted by user {self.user.id}")
        participants_input = self.participants.value.strip()
        logger.debug(f"Participants input: {participants_input}")

        if not participants_input.isdigit() or int(participants_input) <= 0:
            logger.warning(f"Invalid participants input by user {self.user.id}: {participants_input}")
            await interaction.response.send_message(
                "Please enter a valid positive integer for participants.",
                ephemeral=True
            )
            return

        participants_number = int(participants_input)
        logger.debug(f"Validated participants number: {participants_number}")

        # Store the number of participants
        self.bot.events_data[user.id]['current_event']['participants'] = participants_number
        logger.debug(f"Stored participants for user {user.id}: {participants_number}")

        try:
            # Proceed to finalize the event creation
            await finalize_event_creation(interaction, self.bot, self.user)
            logger.info(f"Finalizing event creation for user {self.user.id}")
        except Exception as e:
            logger.exception(f"Error during finalize_event_creation for user {self.user.id}: {e}")
            await interaction.response.send_message(
                "An error occurred while finalizing the event. Please try again.",
                ephemeral=True
            )

async def finalize_event_creation(interaction: discord.Interaction, bot, user):
    logger.info(f"Finalizing event creation for user {user.id}")
    event_data = bot.events_data.get(user.id, {}).get('current_event', {})
    logger.debug(f"Final event data for user {user.id}: {event_data}")

    if not event_data:
        logger.warning(f"No event data found for user {user.id}")
        await interaction.response.send_message(
            "No event data found. Please start the event creation process again.",
            ephemeral=True
        )
        return

    event_type = event_data.get('event_type', 'Unknown')
    event_title = event_data.get('event_title', 'No Title')
    day = event_data.get('day', 'Unknown')
    month = event_data.get('month', 'Unknown')
    year = event_data.get('year', 'Unknown')
    timezone = event_data.get('timezone', 'UTC+0')
    participants = event_data.get('participants', 'Unknown')

    # Format the date
    try:
        event_date = datetime(int(year), int(month), int(day))
        formatted_date = event_date.strftime("%B %d, %Y")
        logger.debug(f"Formatted event date: {formatted_date}")
    except ValueError as ve:
        logger.error(f"Invalid date for user {user.id}: {ve}")
        await interaction.response.send_message(
            "Invalid date selected. Please try creating the event again.",
            ephemeral=True
        )
        del bot.events_data[user.id]['current_event']
        return

    try:
        # Create response buttons for attendees
        view = AttendeeResponseView(bot, user)
        logger.debug(f"AttendeeResponseView created for user {user.id}")

        # Get current time in UTC for the embed timestamp
        current_time_utc = datetime.now(pytz.utc)

        # Create an embed for the event
        embed = discord.Embed(
            title=event_title,
            description=f"**Event Type:** {event_type}\n**Date:** {formatted_date}\n**Timezone:** {timezone}\n**Participants:** {participants}",
            color=discord.Color.blue(),
            timestamp=current_time_utc  # Current UTC time
        )
        embed.set_footer(text=f"Event created by {user.display_name}", icon_url=user.avatar.url if user.avatar else discord.Embed.Empty)
        logger.debug(f"Embed created for event: {event_title}")

        # Send the event message to the same channel
        event_message = await interaction.channel.send(
            embed=embed,
            view=view
        )
        logger.info(f"Event message sent to channel {interaction.channel.id} with message ID {event_message.id}")

        # Inform the user
        await interaction.response.send_message("Event created successfully!", ephemeral=True)
        logger.debug(f"User {user.id} notified of successful event creation.")

        # Store the event message ID and related data
        if 'events' not in bot.events_data[user.id]:
            bot.events_data[user.id]['events'] = []
            logger.debug(f"Initialized 'events' list for user {user.id}")

        bot.events_data[user.id]['events'].append({
            'message_id': event_message.id,
            'channel_id': event_message.channel.id,
            'attendees': {
                'yes': [],
                'no': [],
                'waiting': [],
                'undecided': []
            }
        })
        logger.debug(f"Event data stored for user {user.id}: Message ID {event_message.id}")

        # Clear the temporary 'current_event' data
        del bot.events_data[user.id]['current_event']
        logger.info(f"Cleared temporary event data for user {user.id}")

    except discord.errors.HTTPException as http_exc:
        logger.exception(f"HTTPException during event finalization for user {user.id}: {http_exc}")
        await interaction.response.send_message(
            "An error occurred while sending the event message. Please try again.",
            ephemeral=True
        )
    except Exception as e:
        logger.exception(f"Unexpected error during event finalization for user {user.id}: {e}")
        await interaction.response.send_message(
            "An unexpected error occurred while finalizing the event. Please try again.",
            ephemeral=True
        )

class AttendeeResponseView(discord.ui.View):
    def __init__(self, bot, creator):
        super().__init__(timeout=None)
        self.bot = bot
        self.creator = creator

        # Define response buttons
        self.add_item(AttendeeButton(label="✅ Yes", style=discord.ButtonStyle.success, custom_id="attendee_yes"))
        self.add_item(AttendeeButton(label="❌ No", style=discord.ButtonStyle.danger, custom_id="attendee_no"))
        self.add_item(AttendeeButton(label="⏳ Waiting List", style=discord.ButtonStyle.secondary, custom_id="attendee_waiting"))
        self.add_item(AttendeeButton(label="❓ Undecided", style=discord.ButtonStyle.secondary, custom_id="attendee_undecided"))

class AttendeeButton(discord.ui.Button):
    def __init__(self, label, style, custom_id):
        super().__init__(
            label=label,
            style=style,
            custom_id=custom_id
        )

    async def callback(self, interaction: discord.Interaction):
        logger.info(f"AttendeeButton '{self.custom_id}' clicked by user {interaction.user.id}")
        # Identify the response type
        response_map = {
            "attendee_yes": "yes",
            "attendee_no": "no",
            "attendee_waiting": "waiting",
            "attendee_undecided": "undecided"
        }

        response_type = response_map.get(self.custom_id, None)
        if not response_type:
            logger.warning(f"Invalid response type: {self.custom_id}")
            await interaction.response.send_message("Invalid response type.", ephemeral=True)
            return

        user = interaction.user
        logger.debug(f"Response type determined as: {response_type}")

        # Prevent the event creator from responding
        # Find the event data
        target_event = None
        creator_id = None
        for creator, data in self.view.bot.events_data.items():
            for event in data.get('events', []):
                if event['message_id'] == interaction.message.id and event['channel_id'] == interaction.message.channel.id:
                    target_event = event
                    creator_id = creator
                    break
            if target_event:
                break

        if not target_event:
            logger.error(f"Event not found for message ID {interaction.message.id} in channel {interaction.message.channel.id}")
            await interaction.response.send_message("Event not found.", ephemeral=True)
            return

        if user.id == creator_id:
            logger.info(f"User {user.id} attempted to respond to their own event.")
            await interaction.response.send_message("You cannot respond to your own event.", ephemeral=True)
            return

        # Remove the user from all lists first
        for key in target_event['attendees']:
            if user.id in target_event['attendees'][key]:
                target_event['attendees'][key].remove(user.id)
                logger.debug(f"User {user.id} removed from attendee list '{key}'")

        # Add the user to the selected list
        target_event['attendees'][response_type].append(user.id)
        logger.debug(f"User {user.id} added to attendee list '{response_type}'")

        # Update the embed with attendee lists
        try:
            embed = interaction.message.embeds[0]
            embed.clear_fields()

            # Helper function to format attendee lists
            def format_attendees(attendees):
                if attendees:
                    return '\n'.join([f"<@{uid}>" for uid in attendees])
                else:
                    return 'None'

            embed.add_field(name="✅ Yes", value=format_attendees(target_event['attendees']['yes']), inline=True)
            embed.add_field(name="❌ No", value=format_attendees(target_event['attendees']['no']), inline=True)
            embed.add_field(name="⏳ Waiting List", value=format_attendees(target_event['attendees']['waiting']), inline=True)
            embed.add_field(name="❓ Undecided", value=format_attendees(target_event['attendees']['undecided']), inline=True)

            await interaction.message.edit(embed=embed)
            logger.debug(f"Embed updated for event message ID {interaction.message.id}")

            await interaction.response.send_message(f"You have been marked as **{response_type.capitalize()}**.", ephemeral=True)
            logger.info(f"User {user.id} marked as '{response_type}' for event message ID {interaction.message.id}")
        except discord.errors.NotFound:
            logger.error(f"Message not found when trying to edit embed for event message ID {interaction.message.id}")
            await interaction.response.send_message("Failed to update your response. The event message was not found.", ephemeral=True)
        except discord.errors.HTTPException as http_exc:
            logger.exception(f"HTTPException while editing embed for event message ID {interaction.message.id}: {http_exc}")
            await interaction.response.send_message(
                "An error occurred while updating your response. Please try again.",
                ephemeral=True
            )
        except Exception as e:
            logger.exception(f"Unexpected error while updating embed for event message ID {interaction.message.id}: {e}")
            await interaction.response.send_message(
                "An unexpected error occurred while updating your response. Please try again.",
                ephemeral=True
            )

def setup(bot):
    bot.add_cog(CreateEvent(bot))
