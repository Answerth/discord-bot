import requests
from urllib.parse import quote
from datetime import datetime, timedelta

def fetch_clan_members(clan_name):
    url = f"http://services.runescape.com/m=clan-hiscores/members_lite.ws?clanName={quote(clan_name)}"
    response = requests.get(url)
    data = response.text.strip().split("\n")

    # Parse the clan members data, skipping the header row
    members = []
    for line in data[1:]:
        name, rank, experience, kills = line.split(",")
        # Replace non-breaking space with a regular space
        name = name.replace("\xa0", " ")
        
        # Append parsed data as a dictionary
        members.append({
            "name": name,
            "rank": rank,
            "experience": int(experience),
            "kills": int(kills)
        })

    return members

# Fetch and display the parsed clan members
clan_members = fetch_clan_members("10s")

#print(clan_members)

#for member in clan_members:
#    print(member)


def get_member_activities(clanmembers):
    member_activities = []
    three_days_ago = datetime.now() - timedelta(days=3)

    for clannie in clanmembers:
        name = clannie["name"]
        url = f"https://apps.runescape.com/runemetrics/profile/profile?user={quote(name)}&activities=5"
        response = requests.get(url)

        # Parse JSON response
        data = response.json()

        # Extract 'name' and 'activities', handle missing 'activities' gracefully
        name = data.get("name", name)  # Fallback to the original name if 'name' key is missing
        activities = data.get("activities", [])

        # Filter activities to include only those within the last 3 days
        recent_activities = []
        for activity in activities:
            # Parse the activity date
            activity_date = datetime.strptime(activity["date"], "%d-%b-%Y %H:%M")

            # Check if the activity is within the last 3 days
            if activity_date >= three_days_ago:
                recent_activities.append(activity)

            # Limit to the last 2 recent activities
            if len(recent_activities) >= 2:
                break

        # Append structured data to the result list
        member_activities.append({
            "name": name,
            "activities": recent_activities
        })

    return member_activities

member_activities = get_member_activities(clan_members)

print(member_activities)

#member_activities = get_member_activities(clan_members)
#print(member_activities)
