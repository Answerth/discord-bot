# fetch_and_flatten_data.py
import argparse
import requests
import pandas as pd
from urllib.parse import quote
from datetime import datetime, timedelta
import os
import pickle

def fetch_clan_members(clan_name):
    url = f"http://services.runescape.com/m=clan-hiscores/members_lite.ws?clanName={quote(clan_name)}"
    response = requests.get(url)
    data = response.text.strip().split("\n")

    members = []
    for line in data[1:]:
        name, rank, experience, kills = line.split(",")
        name = name.replace("\xa0", " ")
        members.append({
            "name": name,
            "rank": rank,
            "experience": int(experience),
            "kills": int(kills)
        })
    return pd.DataFrame(members)

def get_member_activities(member_name, number_of_activities=20):
    url = f"https://apps.runescape.com/runemetrics/profile/profile?user={quote(member_name)}&activities={number_of_activities}"
    response = requests.get(url)

    data = response.json()
    activities = data.get("activities", [])

    recent_activities = []
    for activity in activities:
        activity_date = datetime.strptime(activity["date"], "%d-%b-%Y %H:%M")
        recent_activities.append({
            "name": data.get("name", member_name),
            "date": activity["date"],
            "details": activity["details"],
            "text": activity["text"]
        })
    return pd.DataFrame(recent_activities)

def load_recent_members(data_dir, days=7):
    activities_path = os.path.join(data_dir, "fetch_and_flatten_data_files", "activities_data.pkl")
    if not os.path.exists(activities_path):
        print("Activities data not found. Fetching all members.")
        return None  # Indicate that all members should be fetched

    activities_df = pd.read_pickle(activities_path)
    activities_df['date'] = pd.to_datetime(activities_df['date'], format="%d-%b-%Y %H:%M")
    recent_threshold = datetime.now() - timedelta(days=days)
    recent_members = activities_df[activities_df['date'] >= recent_threshold]['name'].unique().tolist()
    return recent_members

def main(clan_name, active_only):
    # Fetch data
    members_df = fetch_clan_members(clan_name)

    if active_only:
        data_dir = os.path.dirname(__file__)
        recent_members = load_recent_members(data_dir)
        if recent_members is not None:
            members_df = members_df[members_df['name'].isin(recent_members)]
            print(f"Fetching activities for {len(members_df)} recently active members.")
        else:
            print("Fetching activities for all members.")
    else:
        print("Fetching activities for all members.")

    # Initialize an empty DataFrame to hold all activities
    all_activities_df = pd.DataFrame()

    # Get activities for each member and concatenate
    names = members_df["name"].tolist()
    for name in names:
        activities_df = get_member_activities(name)
        print(f"Retrieved {len(activities_df)} activities for {name}")
        all_activities_df = pd.concat([all_activities_df, activities_df], ignore_index=True)

    # Save DataFrames to .pkl files in the same directory, overwriting existing files
    data_dir = os.path.dirname(__file__)
    output_dir = os.path.join(data_dir, "./fetch_and_flatten_data_files")
    os.makedirs(output_dir, exist_ok=True)

    members_df.to_pickle(os.path.join(output_dir, "members_data.pkl"))
    all_activities_df.to_pickle(os.path.join(output_dir, "activities_data.pkl"))

    print("Data saved to members_data.pkl and activities_data.pkl")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch and flatten clan member data.")
    parser.add_argument('--active', action='store_true', help='Fetch activities for recently active members only.')
    args = parser.parse_args()

    clan_name = "10s"  # You can also make this configurable via arguments if needed
    main(clan_name, args.active)

